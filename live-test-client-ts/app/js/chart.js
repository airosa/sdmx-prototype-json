// Generated by CoffeeScript 1.3.3
(function() {

  demoModule.directive('ghChart', function() {
    var height, margins, width;
    margins = [40, 40, 40, 40];
    width = 800 - margins[1] - margins[3];
    height = 400 - margins[0] - margins[2];
    return {
      restrict: 'E',
      link: function(scope, element, attrs) {
        var chart;
        chart = d3.select(element[0]).append("svg:svg").attr("width", width + margins[1] + margins[3]).attr("height", height + margins[0] + margins[2]).append("svg:g").attr("transform", "translate(" + margins[3] + "," + margins[0] + ")");
        return scope.$watch(attrs.data, function(series, oldSeries) {
          var line, x, xAxis, xMax, xMin, y, yAxisLeft, yMax, yMin;
          xMax = d3.max(series, function(obs) {
            return obs.date;
          });
          xMin = d3.min(series, function(obs) {
            return obs.date;
          });
          yMax = d3.max(series, function(obs) {
            return obs.value;
          });
          yMin = d3.min(series, function(obs) {
            return obs.value;
          });
          x = d3.time.scale.utc().domain([xMin, xMax]).range([0, width]).nice(d3.time.year);
          y = d3.scale.linear().domain([yMin, yMax]).range([height, 0]).nice();
          line = d3.svg.line().x(function(d) {
            return x(d.date);
          }).y(function(d) {
            return y(d.value);
          });
          xAxis = d3.svg.axis().scale(x).tickSize(-(height + 10)).ticks(d3.time.years, 1).tickSubdivide(0).tickFormat(d3.time.format("%Y")).tickPadding(-2);
          chart.append("svg:g").attr("class", "x axis").attr("transform", "translate(0," + (height + 10) + ")").call(xAxis).selectAll("text").attr("x", 5).attr("dy", null).attr("text-anchor", null);
          yAxisLeft = d3.svg.axis().scale(y).ticks(6).orient("left");
          chart.append("svg:g").attr("class", "y axis").attr("transform", "translate(-10,0)").call(yAxisLeft);
          return chart.append("svg:path").attr("d", line(series)).attr("class", "data1");
        });
      }
    };
  });

}).call(this);
