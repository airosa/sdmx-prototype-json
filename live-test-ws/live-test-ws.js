// Generated by CoffeeScript 1.3.3
(function() {
  var DATA_FILE, PORT_NUMBER, SERVER_NAME, SERVER_VERSION, addCodesToQuery, addPeriodsToQuery, calculateIndexMultipliers, dataset, findMatchingObsIndices, fs, handleRequest, http, loadDataset, log, parse, parseDataQuery, parseDate, parseFlowRef, parseKey, parseProviderRef, parseQueryParameters, parseReportingTimePeriod, query, url;

  http = require('http');

  url = require('url');

  fs = require('fs');

  SERVER_NAME = 'LIVE-TEST-WS';

  SERVER_VERSION = '0.1';

  PORT_NUMBER = 8081;

  DATA_FILE = 'hicp-coicop-inx.json';

  dataset = null;

  log = function(msg) {
    return console.log("" + (new Date().toTimeString().slice(0, 8)) + " " + msg);
  };

  calculateIndexMultipliers = function(dimensions) {
    var dim, i, multipliers, prev, reversedDimensions, _i, _len;
    multipliers = new Array(dimensions.length);
    reversedDimensions = dimensions.slice().reverse();
    prev = 1;
    for (i = _i = 0, _len = reversedDimensions.length; _i < _len; i = ++_i) {
      dim = reversedDimensions[i];
      multipliers[i] = prev;
      prev = dim.length * prev;
    }
    return multipliers.reverse();
  };

  loadDataset = function(filename) {
    var data, jsonString;
    jsonString = fs.readFileSync(filename);
    data = JSON.parse(jsonString);
    data.indexMultipliers = calculateIndexMultipliers(data.codes);
    return data;
  };

  parseReportingTimePeriod = function(frequency, year, period, end) {
    var date;
    if (year % 1 !== 0) {
      return null;
    }
    if (period % 1 !== 0) {
      return null;
    }
    if (period < 1) {
      return null;
    }
    date = new Date(Date.UTC(year, 0, 1, 0, 0, 0));
    if (!end) {
      period = period - 1;
    }
    switch (frequency) {
      case 'A':
        return date;
      case 'S':
        if (2 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (6 * period));
        break;
      case 'T':
        if (3 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (4 * period));
        break;
      case 'Q':
        if (4 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (3 * period));
        break;
      case 'M':
        if (12 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + period);
        break;
      case 'W':
        if (53 < period) {
          return null;
        }
        if (date.getUTCDay() !== 4) {
          date.setUTCMonth(0, 1 + (((4 - date.getUTCDay()) + 7) % 7));
        }
        date.setUTCDate(date.getUTCDate() - 3);
        date.setUTCDate(date.getUTCDate() + (7 * period));
        break;
      case 'D':
        if (366 < period) {
          return null;
        }
        date.setUTCDate(date.getUTCDate() + period);
        break;
      default:
        return null;
    }
    return date;
  };

  parseDate = function(value, end) {
    var date;
    date = null;
    if (/^\d\d\d\d$/.test(value)) {
      date = new Date(Date.UTC(+value, 0, 1, 0, 0, 0));
      if (end) {
        date.setUTCFullYear(date.getUTCFullYear() + 1);
      }
    } else if (/^\d\d\d\d-[A|S|T|Q]\d$/.test(value)) {
      date = parseReportingTimePeriod(value[5], +value.slice(0, 4), +value[6], end);
    } else if (/^\d\d\d\d-[M|W]\d\d$/.test(value)) {
      date = parseReportingTimePeriod(value[5], +value.slice(0, 4), +value.slice(6, 8), end);
    } else if (/^\d\d\d\d-D\d\d\d$/.test(value)) {
      date = parseReportingTimePeriod(value[5], +value.slice(0, 4), +value.slice(6, 9), end);
    } else if (/^\d\d\d\d-\d\d$/.test(value)) {
      date = new Date(Date.UTC(+value.slice(0, 4), +value.slice(5, 7) - 1, 1, 0, 0, 0));
      if (end) {
        date.setUTCMonth(date.getUTCMonth() + 1);
      }
    } else if (/^\d\d\d\d-\d\d-\d\d$/.test(value)) {
      date = new Date(Date.UTC(+value.slice(0, 4), +value.slice(5, 7) - 1, +value.slice(8, 10), 0, 0, 0));
      if (end) {
        date.setUTCDate(date.getUTCDate() + 1);
      }
    } else if (/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d$/.test(value)) {
      return Date.parse(value, 'yyyy-MM-ddTHH:mm:ss');
    } else {
      return null;
    }
    if ((date != null) && end) {
      date.setUTCSeconds(date.getUTCSeconds() - 1);
    }
    return date;
  };

  parseFlowRef = function(flowRefStr, query, response) {
    var flowRef, flowRefOk;
    if (!(flowRefStr != null)) {
      response.errors.push('Mandatory parameter flowRef is missing');
      response.statusCode = 400;
      return;
    }
    flowRef = flowRefStr.split(',');
    switch (flowRef.length) {
      case 1:
        flowRef[1] = flowRef[0];
        flowRef[0] = 'ALL';
        flowRef[2] = 'LATEST';
        break;
      case 2:
        flowRef[2] = 'LATEST';
    }
    flowRefOk = flowRef[0] === 'ALL' || flowRef[0] === 'ECB';
    flowRefOk = flowRefOk && flowRef[1] === 'ECB_ICP1';
    flowRefOk = flowRefOk && flowRef[2] === 'LATEST';
    flowRefOk = flowRefOk && flowRef.length === 3;
    if (!flowRefOk) {
      response.errors.push("Invalid parameter flowRef " + flowRefStr);
      response.statusCode = 400;
      return;
    }
    return query.flowRef = {
      agencyID: flowRef[0],
      id: flowRef[1],
      version: flowRef[2]
    };
  };

  parseKey = function(keyStr, query, dataset, response) {
    var i, key, keys, _i, _len, _results;
    if (keyStr == null) {
      keyStr = 'all';
    }
    if (keyStr === 'all') {
      query.key = 'all';
      return;
    }
    query.key = [];
    keys = keyStr.split('.');
    if (keys.length !== dataset.codes.length - 1) {
      response.errors.push("Invalid number of dimensions in parameter key");
      response.statusCode = 400;
      return;
    }
    _results = [];
    for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
      key = keys[i];
      _results.push(query.key[i] = key.split('+'));
    }
    return _results;
  };

  parseProviderRef = function(providerRefStr, query, response) {
    var providerRef, providerRefOk;
    if (providerRefStr != null) {
      providerRef = providerRefStr.split(',');
      switch (providerRef.length) {
        case 1:
          if (providerRef[0] === 'all') {
            providerRef[1] = 'ALL';
          } else {
            providerRef[1] = providerRef[0];
          }
          providerRef[0] = 'ALL';
      }
      providerRefOk = providerRef.length === 1;
      providerRefOk = providerRefOk && providerRef[0] === 'ECB' || providerRef[0] === 'ALL';
      providerRefOk = providerRef[1] === 'ECB' || providerRef[1] === 'ALL';
      if (!providerRefOk) {
        response.errors.push("Invalid parameter providerRef " + providerRefStr);
        response.statusCode = 400;
        return;
      }
      return query.providerRef = {
        agencyID: providerRef[0],
        id: providerRef[1]
      };
    }
  };

  parseQueryParameters = function(parameters, query, response) {
    var date, n, param, value;
    for (param in parameters) {
      value = parameters[param];
      switch (param) {
        case 'startPeriod':
        case 'endPeriod':
          date = parseDate(value, param === 'endPeriod');
          if (date != null) {
            query[param] = date;
            continue;
          }
          break;
        case 'firstNObservations':
        case 'lastNObservations':
          n = ~Number(value);
          if (String(n) === value && n >= 0) {
            query[param] = n;
            continue;
          }
          break;
        case 'updatedAfter':
          response.statusCode = 501;
          return;
        case 'dimensionAtObservation':
          continue;
        case 'detail':
          switch (value) {
            case 'full':
            case 'dataonly':
            case 'nodata':
              query.detail = value;
              continue;
            case 'serieskeysonly':
              response.statusCode = 501;
              return;
          }
      }
      response.errors.push("Invalid query parameter " + param + " value " + value);
      response.statusCode = 400;
      return;
    }
  };

  parseDataQuery = function(request, response) {
    var path;
    path = request.parsedUrl.pathname.split('/');
    parseFlowRef(path[2], request.query, response);
    if (response.statusCode !== 200) {
      return;
    }
    parseKey(path[3], request.query, dataset, response);
    if (response.statusCode !== 200) {
      return;
    }
    parseProviderRef(path[4], request.query, response);
    if (response.statusCode !== 200) {
      return;
    }
    parseQueryParameters(request.parsedUrl.query, request.query, response);
    if (response.statusCode !== 200) {

    }
  };

  parse = function(request, response) {
    var path;
    request.query = {};
    request.parsedUrl = url.parse(request.url, true);
    path = request.parsedUrl.pathname.split('/');
    request.query.resource = path[1];
    switch (request.query.resource) {
      case 'data':
        return parseDataQuery(request, response);
      default:
        response.statusCode = 501;
    }
  };

  addCodesToQuery = function(request, codes, query) {
    var code, i, index, j, keyCodes, _i, _j, _k, _len, _ref, _ref1, _ref2, _results;
    if (request.query.key === 'all') {
      for (i = _i = 0, _ref = codes.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        query[i] = [];
        for (j = _j = 0, _ref1 = codes[i].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          query[i].push(j);
        }
      }
      return;
    }
    _ref2 = request.query.key;
    _results = [];
    for (i = _k = 0, _len = _ref2.length; _k < _len; i = ++_k) {
      keyCodes = _ref2[i];
      query[i] = [];
      if (keyCodes.length === 1 && keyCodes[0].length === 0) {
        _results.push((function() {
          var _l, _len1, _ref3, _results1;
          _ref3 = codes[i];
          _results1 = [];
          for (j = _l = 0, _len1 = _ref3.length; _l < _len1; j = ++_l) {
            code = _ref3[j];
            _results1.push(query[i].push(j));
          }
          return _results1;
        })());
      } else {
        _results.push((function() {
          var _l, _len1, _results1;
          _results1 = [];
          for (_l = 0, _len1 = keyCodes.length; _l < _len1; _l++) {
            code = keyCodes[_l];
            index = codes[i].indexOf(code);
            if (0 <= index) {
              _results1.push(query[i].push(index));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
    }
    return _results;
  };

  addPeriodsToQuery = function(request, periods, query) {
    var endDate, filteredPeriods, i, period, startDate, _i, _len;
    filteredPeriods = [];
    for (i = _i = 0, _len = periods.length; _i < _len; i = ++_i) {
      period = periods[i];
      if (request.query.startPeriod != null) {
        startDate = parseDate(period, false);
        if (!(request.query.startPeriod <= startDate)) {
          continue;
        }
      }
      if (request.query.endPeriod != null) {
        endDate = parseDate(period, true);
        if (!(endDate <= request.query.endPeriod)) {
          continue;
        }
      }
      filteredPeriods.push(i);
    }
    return query.push(filteredPeriods);
  };

  findMatchingObsIndices = function(key, keyPosition, query, dataset, result) {
    var codeIndex, i, index, j, multiplier, obsCount, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _results;
    if (keyPosition === query.length - 1) {
      obsCount = 0;
      _ref = query[keyPosition];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        codeIndex = _ref[i];
        key[keyPosition] = codeIndex;
        index = 0;
        _ref1 = dataset.indexMultipliers;
        for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
          multiplier = _ref1[j];
          index += key[j] * multiplier;
        }
        if (dataset.data[index] != null) {
          for (j = _k = 0, _len2 = key.length; _k < _len2; j = ++_k) {
            codeIndex = key[j];
            result.codeIndices[j][codeIndex] = 1;
          }
          result.obsIndices.push(index);
          obsCount += 1;
        }
      }
      return;
    }
    _ref2 = query[keyPosition];
    _results = [];
    for (i = _l = 0, _len3 = _ref2.length; _l < _len3; i = ++_l) {
      codeIndex = _ref2[i];
      key[keyPosition] = codeIndex;
      _results.push(findMatchingObsIndices(key, keyPosition + 1, query, dataset, result));
    }
    return _results;
  };

  query = function(dataset, request, response) {
    var codeIndex, codeIndexMapping, codesInQuery, dim, firstResult, i, index, indices, j, mult, newIndex, remainder, resultIndexMultipliers, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _results;
    codesInQuery = [];
    addCodesToQuery(request, dataset.codes, codesInQuery);
    addPeriodsToQuery(request, dataset.codes[dataset.codes.length - 1], codesInQuery);
    firstResult = {
      codeIndices: [],
      obsIndices: []
    };
    for (_i = 0, _len = codesInQuery.length; _i < _len; _i++) {
      dim = codesInQuery[_i];
      firstResult.codeIndices.push({});
    }
    findMatchingObsIndices([], 0, codesInQuery, dataset, firstResult);
    codeIndexMapping = [];
    response.result.codes = [];
    _ref = firstResult.codeIndices;
    for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
      indices = _ref[i];
      response.result.codes[i] = [];
      codeIndexMapping[i] = [];
      _ref1 = Object.keys(indices).sort();
      for (j = _k = 0, _len2 = _ref1.length; _k < _len2; j = ++_k) {
        codeIndex = _ref1[j];
        codeIndexMapping[i][codeIndex] = j;
        response.result.codes[i][j] = dataset.codes[i][codeIndex];
      }
    }
    if (request.query.detail === 'nodata') {
      return;
    }
    resultIndexMultipliers = calculateIndexMultipliers(response.result.codes);
    response.result.data = [];
    _ref2 = firstResult.obsIndices;
    _results = [];
    for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
      index = _ref2[_l];
      newIndex = 0;
      remainder = index;
      _ref3 = dataset.indexMultipliers;
      for (i = _m = 0, _len4 = _ref3.length; _m < _len4; i = ++_m) {
        mult = _ref3[i];
        codeIndex = Math.floor(remainder / mult);
        remainder = remainder - (codeIndex * mult);
        newIndex += codeIndexMapping[i][codeIndex] * resultIndexMultipliers[i];
      }
      _results.push(response.result.data[newIndex] = dataset.data[index]);
    }
    return _results;
  };

  handleRequest = function(request, response) {
    response.setHeader('Server', "" + SERVER_NAME + "/" + SERVER_VERSION);
    response.setHeader('Cache-Control', 'no-cache, no-store');
    response.setHeader('Pragma', 'no-cache');
    response.setHeader('Access-Control-Allow-Origin', '*');
    response.setHeader('Content-Type', 'application/json');
    response.errors = [];
    response.result = {};
    response.statusCode = 200;
    if (!(request.method === 'GET' || request.method === 'HEAD')) {
      response.statusCode = 405;
      response.setHeader('Allow', 'GET, HEAD');
    }
    if (response.statusCode === 200) {
      parse(request, response);
    }
    if (response.statusCode === 200) {
      query(dataset, request, response);
    }
    if (response.statusCode === 200) {
      if (request.method === 'GET') {
        response.end(JSON.stringify(response.result, null, 2));
      } else {
        response.end();
      }
    } else {
      response.end(JSON.stringify({
        error: response.errors
      }, null, 2));
    }
    return log("" + request.method + " " + request.url + " " + response.statusCode);
  };

  log('starting');

  dataset = loadDataset(DATA_FILE);

  http.createServer(handleRequest).listen(PORT_NUMBER);

  log("listening on port " + PORT_NUMBER);

}).call(this);
