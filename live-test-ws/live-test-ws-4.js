// Generated by CoffeeScript 1.6.2
(function() {
  var DATA_FILE, HTTP_BAD_REQUEST, HTTP_INTERNAL_SERVER_ERROR, HTTP_METHOD_NOT_ALLOWED, HTTP_NOT_ACCEPTABLE, HTTP_NOT_FOUND, HTTP_NOT_IMPLEMENTED, HTTP_OK, HTTP_UNAUTHORIZED, NODE_ENV, PORT_NUMBER, SERVER_NAME, SERVER_VERSION, calculateIndexMultipliers, compressResponse, dataset, findDataFlow, fs, handleRequest, http, loadDataset, log, mapCodesInQuery, parse, parseDataQuery, parseDate, parseFlowRef, parseKey, parseProviderRef, parseQueryParams, path, preProcessMessage, query, test, timePeriodToDate, url, validateRequest, zlib;

  http = require('http');

  url = require('url');

  fs = require('fs');

  path = require('path');

  zlib = require('zlib');

  SERVER_NAME = 'LIVE-TEST-WS-4';

  SERVER_VERSION = '0.5.8';

  PORT_NUMBER = process.env.PORT || 8081;

  NODE_ENV = process.env.NODE_ENV || 'test';

  DATA_FILE = 'hicp-coicop-inx-json-slice.json';

  HTTP_OK = 200;

  HTTP_BAD_REQUEST = 400;

  HTTP_UNAUTHORIZED = 401;

  HTTP_NOT_FOUND = 404;

  HTTP_METHOD_NOT_ALLOWED = 405;

  HTTP_NOT_ACCEPTABLE = 406;

  HTTP_INTERNAL_SERVER_ERROR = 500;

  HTTP_NOT_IMPLEMENTED = 501;

  dataset = null;

  log = function(msg) {
    return console.log("" + (new Date().toTimeString().slice(0, 8)) + " " + msg);
  };

  calculateIndexMultipliers = function(dimensions) {
    var dim, i, multipliers, prev, reversedDimensions, _i, _len;

    multipliers = new Array(dimensions.length);
    reversedDimensions = dimensions.slice().reverse();
    prev = 1;
    for (i = _i = 0, _len = reversedDimensions.length; _i < _len; i = ++_i) {
      dim = reversedDimensions[i];
      multipliers[i] = prev;
      prev = dim.length * prev;
    }
    return multipliers.reverse();
  };

  loadDataset = function(filename) {
    var jsonString, msg;

    jsonString = fs.readFileSync(filename);
    msg = JSON.parse(jsonString);
    return preProcessMessage(msg);
  };

  preProcessMessage = function(msg) {
    var attr, dim, ext, key, str, value, _base, _base1, _base2, _base3, _base4, _base5, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

    str = msg.structure;
    ext = str.extensions = {
      componentMap: {},
      keyDimensions: [],
      dimensions: [],
      attributeMap: {}
    };
    if ((_ref = str.dimension) == null) {
      str.dimension = {};
    }
    if ((_ref1 = (_base = str.dimensions).dataSet) == null) {
      _base.dataSet = [];
    }
    if ((_ref2 = (_base1 = str.dimensions).series) == null) {
      _base1.series = [];
    }
    if ((_ref3 = (_base2 = str.dimensions).observation) == null) {
      _base2.observation = [];
    }
    if ((_ref4 = str.attributes) == null) {
      str.attributes = {};
    }
    if ((_ref5 = (_base3 = str.attributes).dataSet) == null) {
      _base3.dataSet = [];
    }
    if ((_ref6 = (_base4 = str.attributes).series) == null) {
      _base4.series = [];
    }
    if ((_ref7 = (_base5 = str.attributes).observation) == null) {
      _base5.observation = [];
    }
    _ref8 = str.dimensions;
    for (key in _ref8) {
      value = _ref8[key];
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        dim = value[_i];
        ext.dimensions.push(dim);
        ext.componentMap[dim.id] = dim;
        if (dim.id === 'TIME_PERIOD') {
          ext.timeDimension = dim;
        } else {
          ext.keyDimensions.push(dim);
        }
      }
    }
    _ref9 = str.attributes;
    for (key in _ref9) {
      value = _ref9[key];
      for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
        attr = value[_j];
        ext.attributeMap[attr.id] = attr;
        ext.componentMap[attr.id] = attr;
      }
    }
    ext.keyDimensions.sort(function(a, b) {
      return a.keyPosition > b.keyPosition;
    });
    return msg;
  };

  exports.timePeriodToDate = timePeriodToDate = function(frequency, year, period, end) {
    var date;

    if (year % 1 !== 0) {
      return null;
    }
    if (period % 1 !== 0) {
      return null;
    }
    if (period < 1) {
      return null;
    }
    date = new Date(Date.UTC(year, 0, 1, 0, 0, 0));
    if (!end) {
      period = period - 1;
    }
    switch (frequency) {
      case 'A':
        if (1 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (12 * period));
        break;
      case 'S':
        if (2 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (6 * period));
        break;
      case 'T':
        if (3 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (4 * period));
        break;
      case 'Q':
        if (4 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + (3 * period));
        break;
      case 'M':
        if (12 < period) {
          return null;
        }
        date.setUTCMonth(date.getUTCMonth() + period);
        break;
      case 'W':
        if (53 < period) {
          return null;
        }
        if (date.getUTCDay() !== 4) {
          date.setUTCMonth(0, 1 + (((4 - date.getUTCDay()) + 7) % 7));
        }
        date.setUTCDate(date.getUTCDate() - 3);
        date.setUTCDate(date.getUTCDate() + (7 * period));
        break;
      case 'D':
        if (366 < period) {
          return null;
        }
        date.setUTCDate(date.getUTCDate() + period);
        break;
      default:
        return null;
    }
    return date;
  };

  exports.parseDate = parseDate = function(value, end) {
    var date, millisecs;

    date = null;
    if (/^\d\d\d\d-[A|S|T|Q]\d$/.test(value)) {
      date = timePeriodToDate(value[5], +value.slice(0, 4), +value[6], end);
    } else if (/^\d\d\d\d-[M|W]\d\d$/.test(value)) {
      date = timePeriodToDate(value[5], +value.slice(0, 4), +value.slice(6, 8), end);
    } else if (/^\d\d\d\d-D\d\d\d$/.test(value)) {
      date = timePeriodToDate(value[5], +value.slice(0, 4), +value.slice(6, 9), end);
    } else {
      millisecs = Date.parse(value);
      if (isNaN(millisecs)) {
        return null;
      }
      date = new Date(millisecs);
      if (end) {
        switch (value.length) {
          case 4:
            date.setUTCFullYear(date.getUTCFullYear() + 1);
            break;
          case 7:
            date.setUTCMonth(date.getUTCMonth() + 1);
            break;
          case 10:
            date.setUTCDate(date.getUTCDate() + 1);
        }
      }
    }
    if ((date != null) && end) {
      date.setUTCSeconds(date.getUTCSeconds() - 1);
    }
    return date;
  };

  exports.parseFlowRef = parseFlowRef = function(flowRefStr, request, response) {
    var flowRef, regex;

    if (flowRefStr == null) {
      response.result.errors.push('Mandatory parameter flowRef is missing');
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    regex = /^(([A-z0-9_@$\-]+)|(([A-z][A-z0-9_\-]*(\.[A-z][A-z0-9_\-]*)*)(\,[A-z0-9_@$\-]+)(\,(latest|([0-9]+(\.[0-9]+)*)))?))$/;
    if (!regex.test(flowRefStr)) {
      response.result.errors.push("Invalid parameter flowRef " + flowRefStr);
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    flowRef = flowRefStr.split(',');
    if (flowRef.length === 1) {
      flowRef[1] = flowRef[0];
      flowRef[0] = 'all';
    }
    if ((flowRef[2] == null) || flowRef[2] === '') {
      flowRef[2] = 'latest';
    }
    return request.query.flowRef = {
      agencyID: flowRef[0],
      id: flowRef[1],
      version: flowRef[2]
    };
  };

  exports.parseKey = parseKey = function(keyStr, request, response) {
    var code, codes, dim, dims, i, key, regex, _i, _j, _len, _len1;

    if (keyStr == null) {
      keyStr = 'all';
    }
    if (keyStr === 'all') {
      request.query.key = 'all';
      return;
    }
    regex = /^(([A-Za-z0-9_@$\-]+([+][A-Za-z0-9_@$\-]+)*)?([.]([A-Za-z0-9_@$\-]+([+][A-Za-z0-9_@$\-]+)*)?)*)$/;
    if (!regex.test(keyStr)) {
      response.result.errors.push("Invalid parameter flowRef " + keyStr);
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    key = [];
    dims = keyStr.split('.');
    for (i = _i = 0, _len = dims.length; _i < _len; i = ++_i) {
      dim = dims[i];
      codes = dim.split('+');
      key[i] = [];
      for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {
        code = codes[_j];
        if (code !== '') {
          key[i].push(code);
        }
      }
      if (-1 < dim.indexOf('+') && key[i].length === 0) {
        response.result.errors.push("Invalid parameter key " + keyStr);
        response.statusCode = HTTP_BAD_REQUEST;
        return;
      }
    }
    return request.query.key = key;
  };

  exports.parseProviderRef = parseProviderRef = function(providerRefStr, request, response) {
    var providerRef, regex;

    if (providerRefStr == null) {
      providerRefStr = 'all';
    }
    regex = /^(([A-z][A-z0-9_\-]*(\.[A-z][A-z0-9_\-]*)*\,)?([A-z0-9_@$\-]+))$/;
    if (!regex.test(providerRefStr)) {
      response.result.errors.push("Invalid parameter providerRef " + providerRefStr);
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    providerRef = providerRefStr.split(',');
    switch (providerRef.length) {
      case 1:
        if (providerRef[0] !== 'all') {
          providerRef[1] = providerRef[0];
          providerRef[0] = 'all';
        }
    }
    if ((providerRef[0] == null) || providerRef[0] === '') {
      providerRef[0] = 'all';
    }
    if ((providerRef[1] == null) || providerRef[1] === '') {
      providerRef[1] = 'all';
    }
    if (providerRef.length !== 2) {
      response.result.errors.push("Invalid parameter providerRef " + providerRefStr);
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    return request.query.providerRef = {
      agencyID: providerRef[0],
      id: providerRef[1]
    };
  };

  exports.parseQueryParams = parseQueryParams = function(request, response) {
    var date, param, parameters, value;

    parameters = url.parse(request.url, true, false).query;
    for (param in parameters) {
      value = parameters[param];
      switch (param) {
        case 'startPeriod':
        case 'endPeriod':
          date = parseDate(value, param === 'endPeriod');
          if (date != null) {
            request.query[param] = date;
            continue;
          }
          break;
        case 'firstNObservations':
        case 'lastNObservations':
          if (0 < +value) {
            request.query[param] = +value;
            continue;
          }
          break;
        case 'updatedAfter':
          response.statusCode = HTTP_NOT_IMPLEMENTED;
          return;
        case 'dimensionAtObservation':
          request.query[param] = value;
          continue;
        case 'detail':
          switch (value) {
            case 'full':
            case 'dataonly':
            case 'nodata':
            case 'serieskeysonly':
              request.query[param] = value;
              continue;
          }
          break;
        case 'extraParams':
          request.query.extraParams = value;
          continue;
      }
      response.result.errors.push("Invalid query parameter " + param + " value " + value);
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
  };

  parseDataQuery = function(path, request, response) {
    parseFlowRef(path[2], request, response);
    if (response.statusCode !== HTTP_OK) {
      return;
    }
    parseKey(path[3], request, response);
    if (response.statusCode !== HTTP_OK) {
      return;
    }
    parseProviderRef(path[4], request, response);
    if (response.statusCode !== HTTP_OK) {
      return;
    }
    parseQueryParams(request, response);
    if (response.statusCode !== HTTP_OK) {

    }
  };

  parse = function(request, response) {
    request.query = {};
    path = url.parse(request.url, false, false).pathname.split('/');
    if (path[1] === 'auth') {
      path.shift();
    }
    request.query.resource = path[1];
    switch (request.query.resource) {
      case 'data':
        return parseDataQuery(path, request, response);
      default:
        response.statusCode = HTTP_NOT_IMPLEMENTED;
    }
  };

  findDataFlow = function(request, response) {
    var found;

    found = true;
    found &= (function() {
      switch (request.query.flowRef.agencyID) {
        case 'all':
        case 'ECB':
          return true;
        default:
          return false;
      }
    })();
    found &= (function() {
      switch (request.query.flowRef.id) {
        case 'ECB_ICP1':
          return true;
        default:
          return false;
      }
    })();
    found &= (function() {
      switch (request.query.flowRef.version) {
        case 'latest':
          return true;
        default:
          return false;
      }
    })();
    found &= (function() {
      switch (request.query.providerRef.agencyID) {
        case 'ECB':
        case 'all':
          return true;
        default:
          return false;
      }
    })();
    found &= (function() {
      switch (request.query.providerRef.id) {
        case 'ECB':
        case 'all':
          return true;
        default:
          return false;
      }
    })();
    if (!found) {
      response.statusCode = HTTP_NOT_FOUND;
      response.result.errors.push("Data flow not found");
      return;
    }
    return dataset;
  };

  mapCodesInQuery = function(request, response, msg) {
    var code, codeMap, codePositions, dim, endDate, i, j, key, keyCodes, period, periods, query, startDate, timeDimension, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4;

    key = msg.structure.extensions.keyDimensions;
    query = {};
    periods = {};
    timeDimension = msg.structure.extensions.timeDimension;
    _ref = timeDimension.values;
    for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
      period = _ref[j];
      if (request.query.startPeriod != null) {
        startDate = parseDate(period.id, false);
        if (!(request.query.startPeriod <= startDate)) {
          continue;
        }
      }
      if (request.query.endPeriod != null) {
        endDate = parseDate(period.id, true);
        if (!(endDate <= request.query.endPeriod)) {
          continue;
        }
      }
      periods[j] = 1;
    }
    query[timeDimension.id] = periods;
    if (request.query.key === 'all') {
      codePositions = {};
      for (_j = 0, _len1 = key.length; _j < _len1; _j++) {
        dim = key[_j];
        _ref1 = dim.values;
        for (j = _k = 0, _len2 = _ref1.length; _k < _len2; j = ++_k) {
          code = _ref1[j];
          codePositions[j] = 1;
        }
        query[dim.id] = codePositions;
      }
      return query;
    }
    if (request.query.key.length !== key.length) {
      response.result.errors.push("Invalid number of dimensions in parameter key");
      response.statusCode = HTTP_BAD_REQUEST;
      return;
    }
    _ref2 = request.query.key;
    for (i = _l = 0, _len3 = _ref2.length; _l < _len3; i = ++_l) {
      keyCodes = _ref2[i];
      dim = key[i];
      codePositions = {};
      if (keyCodes.length === 0) {
        _ref3 = dim.values;
        for (j = _m = 0, _len4 = _ref3.length; _m < _len4; j = ++_m) {
          code = _ref3[j];
          codePositions[j] = 1;
        }
        query[dim.id] = codePositions;
        continue;
      }
      codeMap = {};
      _ref4 = dim.values;
      for (j = _n = 0, _len5 = _ref4.length; _n < _len5; j = ++_n) {
        code = _ref4[j];
        codeMap[code.id] = j;
      }
      for (_o = 0, _len6 = keyCodes.length; _o < _len6; _o++) {
        code = keyCodes[_o];
        codePositions[codeMap[code] != null ? codeMap[code] : -1] = 1;
      }
      query[dim.id] = codePositions;
    }
    return query;
  };

  query = function(msg, request, response) {
    var codesInQuery, comp, componentValuesInResults, components, compressAttrs, compressDataSet, compressDims, compressStructure, comps, count, counter, dimAtObs, dimAtObsPos, dimCount, dims, filterDataSet, filterObservations, filterSeries, flattenDataSet, formatFlatDataSet, fullDataSet, indexObservations, key, key2, mapComponent, mapDataSetToResult, mapSeries, newStr, noAttributes, noObservations, reBaseArray, reBaseDataSet, reBaseObservations, reBaseSeries, reformatResults, resultDataSets, rslt, str, value, value2, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;

    rslt = response.result;
    dimAtObs = request.query.dimensionAtObservation;
    str = msg.structure;
    fullDataSet = true;
    fullDataSet = fullDataSet && (request.query.startPeriod == null);
    fullDataSet = fullDataSet && (request.query.endPeriod == null);
    fullDataSet = fullDataSet && request.query.key === 'all';
    fullDataSet = fullDataSet && (request.query.detail == null);
    fullDataSet = fullDataSet && (dimAtObs == null);
    if (fullDataSet) {
      rslt.dataSets = msg.dataSets;
      rslt.structure = msg.structure;
      return;
    }
    if ((dimAtObs != null) && dimAtObs !== 'AllDimensions') {
      if (!msg.structure.extensions.dimensions.some(function(dim) {
        return dim.id === dimAtObs;
      })) {
        response.statusCode = HTTP_BAD_REQUEST;
        response.result.errors.push("Invalid value for parameter dimensionAtObservation " + dimAtObs);
        return;
      }
    }
    codesInQuery = mapCodesInQuery(request, response, msg);
    if (response.statusCode !== HTTP_OK) {
      return;
    }
    componentValuesInResults = {};
    noObservations = false;
    noAttributes = false;
    switch (request.query.detail) {
      case 'serieskeysonly':
        noObservations = true;
        noAttributes = true;
        break;
      case 'dataonly':
        noAttributes = true;
        break;
      case 'nodata':
        noObservations = true;
    }
    _ref = msg.structure.dimensions;
    for (key in _ref) {
      value = _ref[key];
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        comp = value[_i];
        componentValuesInResults[comp.id] = {};
      }
    }
    _ref1 = msg.structure.attributes;
    for (key in _ref1) {
      value = _ref1[key];
      for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
        comp = value[_j];
        componentValuesInResults[comp.id] = {};
      }
    }
    filterDataSet = function(dataSet) {
      var dimId, i, _k, _l, _len2, _len3, _ref2, _ref3;

      if (dataSet.dataSetAction === 'Delete') {
        return false;
      }
      if (str.dimensions.dataSet.length === 0) {
        return true;
      }
      _ref2 = dataSet.dimensions;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        value = _ref2[i];
        dimId = str.dimensions.dataSet[i].id;
        if (codesInQuery[dimId][value] == null) {
          return false;
        }
        componentValuesInResults[dimId][value] = 1;
      }
      _ref3 = dataSet.attributes;
      for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
        value = _ref3[i];
        if (!(value != null)) {
          continue;
        }
        dimId = str.attributes.dataSet[i].id;
        componentValuesInResults[dimId][value] = 1;
      }
      return true;
    };
    filterSeries = function(series) {
      var dimId, i, _k, _l, _len2, _len3, _len4, _m, _ref2, _ref3, _ref4;

      if (series.observations == null) {
        return false;
      }
      _ref2 = series.dimensions;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        value = _ref2[i];
        dimId = str.dimensions.series[i].id;
        if (codesInQuery[dimId][value] == null) {
          return false;
        }
      }
      _ref3 = series.dimensions;
      for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
        value = _ref3[i];
        dimId = str.dimensions.series[i].id;
        componentValuesInResults[dimId][value] = 1;
      }
      _ref4 = series.attributes;
      for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
        value = _ref4[i];
        if (!(value != null)) {
          continue;
        }
        dimId = str.attributes.series[i].id;
        componentValuesInResults[dimId][value] = 1;
      }
      return true;
    };
    filterObservations = function(obs) {
      var dim, i, pos, _k, _l, _len2, _len3, _len4, _m, _ref2, _ref3, _ref4;

      _ref2 = str.dimensions.observation;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        dim = _ref2[i];
        if (codesInQuery[dim.id][obs[i]] == null) {
          return false;
        }
      }
      _ref3 = str.dimensions.observation;
      for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
        dim = _ref3[i];
        componentValuesInResults[dim.id][obs[i]] = 1;
      }
      pos = str.dimensions.observation.length + 1;
      _ref4 = str.attributes.observation;
      for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
        dim = _ref4[i];
        if (obs[pos + i] == null) {
          continue;
        }
        componentValuesInResults[dim.id][obs[pos + i]] = 1;
      }
      return true;
    };
    mapSeries = function(series) {
      var result;

      result = {
        dimensions: series.dimensions.slice()
      };
      if ((series.attributes != null) && !noAttributes) {
        result.attributes = series.attributes.slice();
      }
      if (!noObservations) {
        result.observations = series.observations.filter(filterObservations).map(function(obs) {
          return obs.slice();
        });
      }
      return result;
    };
    mapDataSetToResult = function(dataSet) {
      var result;

      result = {
        id: dataSet.id,
        action: dataSet.action,
        extracted: dataSet.extracted,
        name: dataSet.name,
        description: dataSet.description
      };
      if (dataSet.dimensions != null) {
        result.dimensions = dataSet.dimensions.slice();
      }
      if ((dataSet.attributes != null) && !noAttributes) {
        result.attributes = dataSet.attributes.slice();
      }
      if (dataSet.series != null) {
        result.series = dataSet.series.filter(filterSeries).map(mapSeries);
      }
      if ((dataSet.observations != null) && !noObservations) {
        result.observations = dataSet.observations.filter(filterObservations).map(function(obs) {
          return obs.slice();
        });
      }
      return result;
    };
    resultDataSets = msg.dataSets.filter(filterDataSet).map(mapDataSetToResult);
    count = 0;
    for (key in componentValuesInResults) {
      value = componentValuesInResults[key];
      count += Object.keys(value).length;
    }
    if (count === 0) {
      response.statusCode = HTTP_NOT_FOUND;
      response.result.errors.push('Data not found');
      return;
    }
    for (key in componentValuesInResults) {
      value = componentValuesInResults[key];
      counter = 0;
      for (key2 in value) {
        value2 = value[key2];
        value[key2] = counter;
        counter += 1;
      }
    }
    reBaseArray = function(target, source, start) {
      var dim, i, _k, _len2, _results;

      if (target == null) {
        return;
      }
      if (start == null) {
        start = 0;
      }
      _results = [];
      for (i = _k = 0, _len2 = source.length; _k < _len2; i = ++_k) {
        dim = source[i];
        if (target[start + i] == null) {
          continue;
        }
        _results.push(target[start + i] = componentValuesInResults[dim.id][target[start + i]]);
      }
      return _results;
    };
    reBaseObservations = function(obs) {
      var start;

      reBaseArray(obs, str.dimensions.observation);
      start = str.dimensions.observation.length + 1;
      reBaseArray(obs, str.attributes.observation, start);
      return obs;
    };
    reBaseSeries = function(series) {
      reBaseArray(series.dimensions, str.dimensions.series);
      reBaseArray(series.attributes, str.attributes.series);
      if (series.observations != null) {
        series.observations = series.observations.map(reBaseObservations);
      }
      return series;
    };
    reBaseDataSet = function(dataSet) {
      reBaseArray(dataSet.dimensions, str.dimensions.dataSet);
      reBaseArray(dataSet.attributes, str.attributes.dataSet);
      if (dataSet.series != null) {
        dataSet.series = dataSet.series.map(reBaseSeries);
      }
      if (dataSet.observations != null) {
        dataSet.observations = dataSet.observations.map(reBaseObservations);
      }
      return dataSet;
    };
    rslt.dataSets = resultDataSets.map(reBaseDataSet);
    mapComponent = function(comp) {
      var resultComp, _ref2;

      resultComp = {
        id: comp.id,
        name: comp.name,
        description: comp.description,
        role: comp.role,
        values: []
      };
      _ref2 = componentValuesInResults[comp.id];
      for (key in _ref2) {
        value = _ref2[key];
        resultComp.values[value] = comp.values[key];
      }
      return resultComp;
    };
    rslt.structure = {
      id: msg.structure.id,
      href: msg.structure.href,
      ref: msg.structure.ref,
      dimensions: {},
      attributes: {}
    };
    _ref2 = msg.structure.dimensions;
    for (key in _ref2) {
      components = _ref2[key];
      comps = rslt.structure.dimensions[key] = [];
      for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
        comp = components[_k];
        if (!(comp != null)) {
          continue;
        }
        if (request.query.detail === 'serieskeysonly' && comp.id === 'TIME_PERIOD') {
          continue;
        }
        comps.push(mapComponent(comp));
      }
    }
    if (!noAttributes) {
      _ref3 = msg.structure.attributes;
      for (key in _ref3) {
        components = _ref3[key];
        rslt.structure.attributes[key] = components.map(mapComponent);
      }
    }
    formatFlatDataSet = function(ds) {
      var createSeries, dimensions, filteredSeries, i, obsDims, prevSeries, series, seriesTmp, _l, _len3;

      dimensions = ds.observations.map(function(o) {
        return o.splice(0, dimCount);
      });
      obsDims = dimensions.map(function(d) {
        return d.splice(dimAtObsPos, 1);
      });
      createSeries = function(d, i) {
        var series;

        series = {
          dimensions: d,
          observations: [obsDims[i].concat(ds.observations[i])]
        };
        return series;
      };
      seriesTmp = dimensions.map(createSeries);
      seriesTmp.sort(function(a, b) {
        if (a.dimensions.every(function(d, i) {
          return d <= b.dimensions[i];
        })) {
          return -1;
        } else {
          return 1;
        }
      });
      prevSeries = seriesTmp[0];
      filteredSeries = [];
      for (i = _l = 0, _len3 = seriesTmp.length; _l < _len3; i = ++_l) {
        series = seriesTmp[i];
        if (0 < i) {
          if (prevSeries.dimensions.every(function(d, j) {
            return d === series.dimensions[j];
          })) {
            prevSeries.observations = prevSeries.observations.concat(series.observations);
          } else {
            filteredSeries.push(prevSeries);
            prevSeries = series;
          }
        }
      }
      filteredSeries.push(prevSeries);
      ds.series = filteredSeries;
      return delete ds.observations;
    };
    flattenDataSet = function(ds) {
      if (ds.series != null) {
        ds.observations = [];
        ds.series.forEach(function(s) {
          if (s.observations != null) {
            return ds.observations = ds.observations.concat(s.observations.map(function(o) {
              return s.dimensions.concat(o, s.attributes);
            }));
          } else if (s.attributes != null) {
            return ds.observations = ds.observations.concat([s.dimensions.concat(s.attributes)]);
          } else {
            return ds.observations = ds.observations.concat([s.dimensions]);
          }
        });
        return delete ds.series;
      }
    };
    indexObservations = function(ds) {
      var dimCount, obs, observations, _l, _len3, _ref4;

      observations = {};
      dimCount = rslt.structure.dimensions.observation.length;
      _ref4 = ds.observations;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        obs = _ref4[_l];
        key = obs.slice(0, dimCount).join(':');
        value = obs.slice(dimCount);
        observations[key] = value;
      }
      return ds.observations = observations;
    };
    reformatResults = false;
    newStr = rslt.structure;
    if (dimAtObs != null) {
      if (dimAtObs === 'AllDimensions') {
        if (0 < str.dimensions.dataSet.length) {
          reformatResults = true;
        }
        if (0 < str.dimensions.series.length) {
          reformatResults = true;
        }
      } else {
        if (1 < str.dimensions.series.length) {
          reformatResults = true;
        }
        reformatResults = dimAtObs !== str.dimensions.observation[0].id;
      }
    }
    if (reformatResults) {
      if (dimAtObs === 'AllDimensions') {
        newStr.dimensions = {
          dataSet: [],
          series: [],
          observation: newStr.dimensions.dataSet.concat(newStr.dimensions.series, newStr.dimensions.observation)
        };
        newStr.attributes = {
          dataSet: newStr.attributes.dataSet,
          series: [],
          observation: newStr.attributes.observation.concat(newStr.attributes.series)
        };
      } else {
        newStr.dimensions = {
          dataSet: newStr.dimensions.dataSet.filter(function(d) {
            return d.id !== dimAtObs;
          }),
          series: newStr.dimensions.series.concat(newStr.dimensions.observation).filter(function(d) {
            return d.id !== dimAtObs;
          }),
          observation: newStr.dimensions.series.concat(newStr.dimensions.observation).filter(function(d) {
            return d.id === dimAtObs;
          })
        };
        newStr.attributes = {
          dataSet: newStr.attributes.dataSet,
          series: newStr.attributes.series,
          observation: newStr.attributes.observation
        };
      }
      dims = newStr.dimensions.dataSet.concat(newStr.dimensions.series, newStr.dimensions.observation);
      dimAtObsPos = dims.indexOf(dimAtObs);
      dimCount = dims.length;
      rslt.dataSets.forEach(flattenDataSet);
      if (dimAtObs !== 'AllDimensions') {
        rslt.dataSets.forEach(formatFlatDataSet);
      }
      if (dimAtObs === 'AllDimensions' && request.query.extraParams === 'index') {
        rslt.dataSets.forEach(indexObservations);
      }
    }
    compressStructure = function(type) {
      var compress;

      compress = type.series.map(function(d) {
        return d.values.length < 2;
      });
      type.dataSet = type.dataSet.concat(type.series.filter(function(d, i) {
        return compress[i];
      }));
      type.series = type.series.filter(function(d, i) {
        return !compress[i];
      });
      return compress;
    };
    compressDims = compressStructure(rslt.structure.dimensions);
    compressAttrs = compressStructure(rslt.structure.attributes);
    compressDataSet = function(dataSet) {
      var _ref4, _ref5;

      if (dataSet.series == null) {
        return;
      }
      if ((_ref4 = dataSet.dimensions) == null) {
        dataSet.dimensions = [];
      }
      dataSet.dimensions = dataSet.dimensions.concat(dataSet.series[0].dimensions.filter(function(d, i) {
        return compressDims[i];
      }));
      dataSet.series.forEach(function(s) {
        return s.dimensions = s.dimensions.filter(function(d, i) {
          return !compressDims[i];
        });
      });
      if ((_ref5 = dataSet.attributes) == null) {
        dataSet.attributes = [];
      }
      dataSet.attributes = dataSet.attributes.concat(dataSet.series[0].attributes.filter(function(d, i) {
        return compressAttrs[i];
      }));
      return dataSet.series.forEach(function(s) {
        return s.attributes = s.attributes.filter(function(d, i) {
          return !compressAttrs[i];
        });
      });
    };
    rslt.dataSets.forEach(compressDataSet);
  };

  validateRequest = function(request, response) {
    var auth, encoding, header, matches, mediaTypes, methods, parts, password, token, type, username, _i, _len;

    methods = ['GET', 'HEAD', 'OPTIONS'];
    mediaTypes = ['application/json', 'application/*', '*/*'];
    response.setHeader('Allow', methods.join(', '));
    response.setHeader('Access-Control-Allow-Methods', methods.join(', '));
    response.setHeader('Access-Control-Allow-Credentials', 'true');
    if (request.headers['origin'] != null) {
      response.setHeader('Access-Control-Allow-Origin', request.headers['origin']);
    } else {
      response.setHeader('Access-Control-Allow-Origin', '*');
    }
    if (methods.indexOf(request.method) === -1) {
      response.statusCode = HTTP_METHOD_NOT_ALLOWED;
      response.result.errors.push('Supported methods: ' + methods.join(', '));
      return;
    }
    if (request.headers['accept'] != null) {
      matches = 0;
      for (_i = 0, _len = mediaTypes.length; _i < _len; _i++) {
        type = mediaTypes[_i];
        matches += request.headers['accept'].indexOf(type) + 1;
      }
      if (matches === 0) {
        response.statusCode = HTTP_NOT_ACCEPTABLE;
        response.result.errors.push('Supported media types: ' + mediaTypes.join(','));
        return;
      }
    }
    encoding = request.headers['accept-encoding'];
    if (encoding != null) {
      if (encoding.match(/\bdeflate\b/)) {
        response.setHeader('Content-Encoding', 'deflate');
      } else if (encoding.match(/\bgzip\b/)) {
        response.setHeader('Content-Encoding', 'gzip');
      }
    }
    if (request.headers['access-control-request-headers'] != null) {
      response.setHeader('Access-Control-Allow-Headers', request.headers['access-control-request-headers']);
    }
    if (request.method === 'GET') {
      path = url.parse(request.url, false, false).pathname.split('/');
      if (path[1] === 'auth') {
        header = request.headers['authorization'] || '';
        token = header.split(/\s+/).pop() || '';
        auth = new Buffer(token, 'base64').toString();
        parts = auth.split(/:/);
        username = parts[0];
        password = parts[1];
        if (username !== 'test' || password !== 'test') {
          response.setHeader('WWW-Authenticate', 'BASIC realm="data/ECB,ECB_ICP1"');
          response.statusCode = HTTP_UNAUTHORIZED;
          response.result.errors.push('authorization required');
        }
      }
    }
  };

  compressResponse = function(request, response) {
    var body, sendResponse;

    sendResponse = function(err, body) {
      var encoding;

      if (err != null) {
        response.statusCode = HTTP_INTERNAL_SERVER_ERROR;
        response.end();
        return;
      }
      response.setHeader('X-Runtime', new Date() - response.start);
      if (body != null) {
        if (Buffer.isBuffer(body)) {
          response.setHeader('Content-Length', body.length);
        } else {
          response.setHeader('Content-Length', Buffer.byteLength(body));
        }
        if (request.method === 'GET') {
          response.end(body);
        } else {
          response.end();
        }
      } else {
        response.setHeader('Content-Length', 0);
        response.end();
      }
      encoding = response.getHeader('Content-Encoding');
      if (encoding == null) {
        encoding = '';
      }
      log("" + request.method + " " + request.url + " " + response.statusCode + " " + encoding);
    };
    switch (request.method) {
      case 'OPTIONS':
        return sendResponse();
      case 'GET':
      case 'HEAD':
        body = JSON.stringify(response.result, null, 2);
        switch (response.getHeader('Content-Encoding')) {
          case 'deflate':
            return zlib.deflate(body, sendResponse);
          case 'gzip':
            return zlib.gzip(body, sendResponse);
          default:
            return sendResponse(void 0, body);
        }
    }
  };

  handleRequest = function(request, response) {
    var dataflow;

    response.start = new Date();
    response.setHeader('X-Powered-By', "Node.js/" + process.version);
    response.setHeader('Server', "" + SERVER_NAME + "/" + SERVER_VERSION + "/" + NODE_ENV);
    response.setHeader('Cache-Control', 'no-cache, no-store');
    response.setHeader('Pragma', 'no-cache');
    response.setHeader('Content-Type', 'application/json');
    response.setHeader('Content-Language', 'en');
    response.statusCode = HTTP_OK;
    response.result = {
      'sdmx-proto-json': dataset['sdmx-proto-json'],
      header: {
        id: "IREF" + (process.hrtime()[0]) + (process.hrtime()[1]),
        test: NODE_ENV === 'production' ? false : true,
        prepared: (new Date()).toISOString(),
        sender: {
          id: SERVER_NAME,
          name: SERVER_NAME
        }
      },
      errors: []
    };
    validateRequest(request, response);
    if (response.statusCode === HTTP_OK) {
      parse(request, response);
    }
    if (response.statusCode === HTTP_OK) {
      dataflow = findDataFlow(request, response);
    }
    if (request.method === 'OPTIONS') {
      response.setHeader('Content-Length', 0);
    } else {
      if (response.statusCode === HTTP_OK) {
        query(dataflow, request, response);
      }
      if (response.statusCode === HTTP_OK) {
        response.result.header.name = dataset.header.name;
        response.result.errors = null;
      }
    }
    return compressResponse(request, response);
  };

  test = function() {
    var req, res;

    res = {
      headers: [],
      setHeader: function(n, v) {
        return this.headers[n] = v;
      },
      getHeader: function(n) {
        return this.headers[n];
      },
      end: function() {}
    };
    req = {
      method: 'GET',
      url: '/data/ECB_ICP1/M.PT+FI.N.073000.4.INX?startPeriod=2009&endPeriod=2009',
      headers: {
        accept: 'application/json'
      }
    };
    return handleRequest(req, res);
  };

  log('starting');

  process.on('uncaughtException', function(err) {
    log(err);
    return process.exit();
  });

  dataset = loadDataset(path.join(path.dirname(fs.realpathSync(__filename)), DATA_FILE));

  http.createServer(handleRequest).listen(PORT_NUMBER);

  log("listening on port " + PORT_NUMBER);

  if (NODE_ENV === 'production') {
    log('Warning: This server is not designed for a production environment');
  }

}).call(this);
