// Generated by CoffeeScript 1.4.0
(function() {
  var validationApp;

  validationApp = angular.module('VizApp', []);

  validationApp.controller('VizCtrl', function($scope, $http) {
    var buildCrossFilter, info, log, obsValueDim, observationDimensions, observationGroups, onData, onError, preProcess, requestData, schema, seriesDimensions, seriesGroups, severe, updateDisplay;
    $scope.schemaType = 'json-slice';
    $scope.messages = [];
    schema = {};
    $scope.topRecords = [];
    obsValueDim = {};
    seriesDimensions = [];
    observationDimensions = [];
    $scope.seriesDisplayDimensions = [];
    $scope.observationDisplayDimensions = [];
    seriesGroups = [];
    observationGroups = [];
    $scope.start = function() {
      $scope.seriesDisplayDimensions = [];
      $scope.observationDisplayDimensions = [];
      $scope.messages = [];
      return requestData();
    };
    requestData = function() {
      var config;
      info("Requesting data");
      config = {
        method: 'GET',
        url: 'data.json',
        cache: false,
        transformResponse: function(data) {
          return data;
        }
      };
      return $http(config).success(onData).error(onError);
    };
    onData = function(data, status, headers, config) {
      var response;
      info('Received data');
      info('Starting to parse data');
      try {
        response = JSON.parse(data);
      } catch (error) {
        severe(error);
        return;
      }
      info("Data sets " + response.dataSets.length);
      info("Series " + response.dataSets[0].series.length);
      preProcess(response);
      $scope.response = response;
      $scope.filter = buildCrossFilter(response);
      info("Crossfilter built " + ($scope.filter.size()) + " records");
      info('Finished parsing data');
      updateDisplay();
      info('Finished updating display');
      return info('Done');
    };
    onError = function(data, status, headers, config) {
      var json;
      try {
        json = JSON.parse(data);
        return severe("" + status + " " + json.errors);
      } catch (err) {
        return severe(status);
      }
    };
    info = function(msg) {
      return log('muted', msg);
    };
    severe = function(msg) {
      return log('text-error', "Error: " + msg);
    };
    log = function(style, msg) {
      return $scope.messages.push({
        "class": style,
        msg: (new Date()).toISOString().slice(11, 23) + ' ' + msg
      });
    };
    buildCrossFilter = function(response) {
      var dim, ds, filter, filterDim, i, obs, obsArray, series, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      obsArray = [];
      _ref = response.dataSets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ds = _ref[_i];
        _ref1 = ds.series;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          series = _ref1[_j];
          _ref2 = series.observations;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            obs = _ref2[_k];
            obsArray.push([series.dimensions, obs]);
          }
        }
      }
      filter = crossfilter(obsArray);
      seriesDimensions = [];
      seriesGroups = [];
      _ref3 = response.structure.packaging.seriesDimensions;
      for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
        dim = _ref3[i];
        filterDim = filter.dimension(function(a) {
          return a[0][i];
        });
        seriesDimensions.push(filterDim);
        seriesGroups.push(filterDim.group());
      }
      observationDimensions = [];
      observationGroups = [];
      _ref4 = response.structure.packaging.observationDimensions;
      for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
        dim = _ref4[i];
        filterDim = filter.dimension(function(a) {
          return a[1][i];
        });
        observationDimensions.push(filterDim);
        observationGroups.push(filterDim.group());
      }
      obsValueDim = filter.dimension(function(a) {
        return a[1][1];
      });
      return filter;
    };
    $scope.update = function(type, index, val) {
      var dims;
      dims = (function() {
        switch (type) {
          case 'ser':
            return seriesDimensions;
          case 'obs':
            return observationDimensions;
        }
      })();
      if (val[0] === -1) {
        dims[index].filterAll();
      } else {
        dims[index].filterExact(val[0]);
      }
      return updateDisplay();
    };
    updateDisplay = function() {
      var dim, group, grouping, i, rec, row, top, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _results;
      for (i = _i = 0, _len = seriesGroups.length; _i < _len; i = ++_i) {
        group = seriesGroups[i];
        dim = $scope.seriesDisplayDimensions[i];
        _ref = group.all();
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          grouping = _ref[_j];
          if (grouping.value == null) {
            continue;
          }
          val = dim.values[grouping.key + 1];
          val.title = "" + val.name + " (" + grouping.value + ")";
        }
      }
      for (i = _k = 0, _len2 = observationGroups.length; _k < _len2; i = ++_k) {
        group = observationGroups[i];
        dim = $scope.observationDisplayDimensions[i];
        _ref1 = group.all();
        for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
          grouping = _ref1[_l];
          if (grouping.value == null) {
            continue;
          }
          val = dim.values[grouping.key + 1];
          val.title = "" + val.name + " (" + grouping.value + ")";
        }
      }
      top = obsValueDim.top(50);
      $scope.topRecords = [];
      _results = [];
      for (_m = 0, _len4 = top.length; _m < _len4; _m++) {
        rec = top[_m];
        row = [];
        _ref2 = rec[0];
        for (i = _n = 0, _len5 = _ref2.length; _n < _len5; i = ++_n) {
          val = _ref2[i];
          row.push($scope.response.structure.packaging.seriesDimensions[i].values[val].name);
        }
        _ref3 = rec[1].slice(0, -1);
        for (i = _o = 0, _len6 = _ref3.length; _o < _len6; i = ++_o) {
          val = _ref3[i];
          row.push($scope.response.structure.packaging.observationDimensions[i].values[val].name);
        }
        row.push(rec[1].slice(-1)[0]);
        _results.push($scope.topRecords.push(row));
      }
      return _results;
    };
    return preProcess = function(response) {
      var dim, dispDim, i, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
      $scope.title = response.dataSets[0].name;
      $scope.source = response.dataSets[0].provider.name;
      _ref = response.structure.packaging.seriesDimensions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dim = _ref[_i];
        dispDim = {
          name: dim.name,
          values: [
            {
              name: 'All',
              index: -1,
              title: 'All'
            }
          ]
        };
        _ref1 = dim.values;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          val = _ref1[i];
          dispDim.values.push({
            name: val.name,
            index: i,
            title: val.name
          });
        }
        $scope.seriesDisplayDimensions.push(dispDim);
      }
      _ref2 = response.structure.packaging.observationDimensions;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        dim = _ref2[_k];
        dispDim = {
          name: dim.name,
          values: [
            {
              name: 'All',
              index: -1,
              title: 'All'
            }
          ]
        };
        _ref3 = dim.values;
        for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
          val = _ref3[i];
          dispDim.values.push({
            name: val.name,
            index: i,
            title: val.name
          });
        }
        _results.push($scope.observationDisplayDimensions.push(dispDim));
      }
      return _results;
    };
  });

}).call(this);
